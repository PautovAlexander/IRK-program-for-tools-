# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\QT_Designer\Оснастка\ToolsQT.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from datetime import datetime, timedelta  # модуль timedelta позволяет к текущей дате времени прибавлять\убавлять время
import openpyxl

book = openpyxl.load_workbook("C:\Оснастка\Оснастка1.xlsx",read_only=True)  # заменяю open на load_workbook, то файл сразу загружается в память, и обработка данных идет гораздо быстрее.
sheet = book.active  # активирует Лист 1 в файле ехел

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QTextEdit, QMenuBar, QApplication


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(986, 716)
        MainWindow.setStyleSheet("background-color: rgb(135, 135, 135);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_NSS_END = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_NSS_END.setGeometry(QtCore.QRect(600, 380, 371, 71))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_NSS_END.setFont(font)
        self.pushButton_NSS_END.setObjectName("pushButton_NSS_END")
        self.pushButton_NSS_365 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_NSS_365.setGeometry(QtCore.QRect(600, 460, 371, 71))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_NSS_365.setFont(font)
        self.pushButton_NSS_365.setObjectName("pushButton_NSS_365")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-20, -40, 1101, 691))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("C:\\QT_Designer\\Оснастка\\Фон инструмент.jpg"))
        self.label.setObjectName("label")
        self.label_Window_results = QtWidgets.QLabel(self.centralwidget)
        self.label_Window_results.setGeometry(QtCore.QRect(10, 40, 581, 491))
        self.label_Window_results.setObjectName("label_Window_results")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(600, 40, 191, 31))
        self.label_3.setStyleSheet("background-color: rgb(212, 198, 4);")
        self.label_3.setObjectName("label_3")
        self.pushButton_01 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_01.setGeometry(QtCore.QRect(600, 80, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_01.setFont(font)
        self.pushButton_01.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_01.setObjectName("pushButton_01")
        self.pushButton_02 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_02.setGeometry(QtCore.QRect(600, 130, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_02.setFont(font)
        self.pushButton_02.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_02.setObjectName("pushButton_02")
        self.pushButton_03 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_03.setGeometry(QtCore.QRect(600, 180, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_03.setFont(font)
        self.pushButton_03.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_03.setObjectName("pushButton_03")
        self.pushButton_04 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_04.setGeometry(QtCore.QRect(600, 230, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_04.setFont(font)
        self.pushButton_04.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_04.setObjectName("pushButton_04")
        self.pushButton_05 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_05.setGeometry(QtCore.QRect(600, 280, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_05.setFont(font)
        self.pushButton_05.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_05.setObjectName("pushButton_05")
        self.pushButton_06 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_06.setGeometry(QtCore.QRect(600, 330, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_06.setFont(font)
        self.pushButton_06.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_06.setObjectName("pushButton_06")
        self.pushButton_07 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_07.setGeometry(QtCore.QRect(700, 80, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_07.setFont(font)
        self.pushButton_07.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_07.setObjectName("pushButton_07")
        self.pushButton_08 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_08.setGeometry(QtCore.QRect(700, 130, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_08.setFont(font)
        self.pushButton_08.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_08.setObjectName("pushButton_08")
        self.pushButton_09 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_09.setGeometry(QtCore.QRect(700, 180, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_09.setFont(font)
        self.pushButton_09.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_09.setObjectName("pushButton_09")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(700, 230, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(700, 280, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(700, 330, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setStyleSheet("background-color: rgb(208, 196, 57);")
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_01_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_01_3.setGeometry(QtCore.QRect(800, 80, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_01_3.setFont(font)
        self.pushButton_01_3.setObjectName("pushButton_01_3")
        self.pushButton_02_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_02_3.setGeometry(QtCore.QRect(800, 130, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_02_3.setFont(font)
        self.pushButton_02_3.setObjectName("pushButton_02_3")
        self.pushButton_03_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_03_3.setGeometry(QtCore.QRect(800, 180, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_03_3.setFont(font)
        self.pushButton_03_3.setObjectName("pushButton_03_3")
        self.pushButton_04_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_04_3.setGeometry(QtCore.QRect(800, 230, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_04_3.setFont(font)
        self.pushButton_04_3.setObjectName("pushButton_04_3")
        self.pushButton_05_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_05_3.setGeometry(QtCore.QRect(800, 280, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_05_3.setFont(font)
        self.pushButton_05_3.setObjectName("pushButton_05_3")
        self.pushButton_06_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_06_3.setGeometry(QtCore.QRect(800, 330, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_06_3.setFont(font)
        self.pushButton_06_3.setObjectName("pushButton_06_3")
        self.pushButton_07_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_07_3.setGeometry(QtCore.QRect(890, 80, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_07_3.setFont(font)
        self.pushButton_07_3.setObjectName("pushButton_07_3")
        self.pushButton_08_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_08_3.setGeometry(QtCore.QRect(890, 130, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_08_3.setFont(font)
        self.pushButton_08_3.setObjectName("pushButton_08_3")
        self.pushButton_09_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_09_3.setGeometry(QtCore.QRect(890, 180, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_09_3.setFont(font)
        self.pushButton_09_3.setObjectName("pushButton_09_3")
        self.pushButton_10_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10_3.setGeometry(QtCore.QRect(890, 230, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_10_3.setFont(font)
        self.pushButton_10_3.setObjectName("pushButton_10_3")
        self.pushButton_11_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11_3.setGeometry(QtCore.QRect(890, 280, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_11_3.setFont(font)
        self.pushButton_11_3.setObjectName("pushButton_11_3")
        self.pushButton_12_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12_3.setGeometry(QtCore.QRect(890, 330, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_12_3.setFont(font)
        self.pushButton_12_3.setObjectName("pushButton_12_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(800, 40, 171, 31))
        self.label_4.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.label_4.setObjectName("label_4")
        self.label.raise_()
        self.pushButton_NSS_END.raise_()
        self.pushButton_NSS_365.raise_()
        self.label_Window_results.raise_()
        self.label_3.raise_()
        self.pushButton_01.raise_()
        self.pushButton_02.raise_()
        self.pushButton_03.raise_()
        self.pushButton_04.raise_()
        self.pushButton_05.raise_()
        self.pushButton_06.raise_()
        self.pushButton_07.raise_()
        self.pushButton_08.raise_()
        self.pushButton_09.raise_()
        self.pushButton_10.raise_()
        self.pushButton_11.raise_()
        self.pushButton_12.raise_()
        self.pushButton_01_3.raise_()
        self.pushButton_02_3.raise_()
        self.pushButton_03_3.raise_()
        self.pushButton_04_3.raise_()
        self.pushButton_05_3.raise_()
        self.pushButton_06_3.raise_()
        self.pushButton_07_3.raise_()
        self.pushButton_08_3.raise_()
        self.pushButton_09_3.raise_()
        self.pushButton_10_3.raise_()
        self.pushButton_11_3.raise_()
        self.pushButton_12_3.raise_()
        self.label_4.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 986, 34))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.show_list()  # метод для вывода списка оснастки

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_NSS_END.setText(_translate("MainWindow", "Оснастка с истекшим НСС"))
        self.pushButton_NSS_365.setText(_translate("MainWindow", "НСС заканчивыается (365д.)"))
        self.label.setWhatsThis(
            _translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.label_Window_results.setText(_translate("MainWindow", "Проверка..."))
        self.label_3.setToolTip(
            _translate("MainWindow", "<html><head/><body><p align=\"center\">ПОВЕРКА СЕГОДНЯ</p></body></html>"))
        self.label_3.setWhatsThis(
            _translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.label_3.setText(_translate("MainWindow",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:8pt;\">ПОВЕРКА СЕГОДНЯ</span></p></body></html>"))
        self.pushButton_01.setText(_translate("MainWindow", "ЯНВ"))
        self.pushButton_02.setText(_translate("MainWindow", "ФЕВ"))
        self.pushButton_03.setText(_translate("MainWindow", "МАРТ"))
        self.pushButton_04.setText(_translate("MainWindow", "АПРЕЛЬ"))
        self.pushButton_05.setText(_translate("MainWindow", "МАЙ"))
        self.pushButton_06.setText(_translate("MainWindow", "ИЮНЬ"))
        self.pushButton_07.setText(_translate("MainWindow", "ИЮЛЬ"))
        self.pushButton_08.setText(_translate("MainWindow", "АВГ"))
        self.pushButton_09.setText(_translate("MainWindow", "СЕНТ"))
        self.pushButton_10.setText(_translate("MainWindow", "ОКТ"))
        self.pushButton_11.setText(_translate("MainWindow", "НОЯ"))
        self.pushButton_12.setText(_translate("MainWindow", "ДЕК"))
        self.pushButton_01_3.setText(_translate("MainWindow", "янв"))
        self.pushButton_02_3.setText(_translate("MainWindow", "фев"))
        self.pushButton_03_3.setText(_translate("MainWindow", "март"))
        self.pushButton_04_3.setText(_translate("MainWindow", "апрель"))
        self.pushButton_05_3.setText(_translate("MainWindow", "май"))
        self.pushButton_06_3.setText(_translate("MainWindow", "июнь"))
        self.pushButton_07_3.setText(_translate("MainWindow", "июль"))
        self.pushButton_08_3.setText(_translate("MainWindow", "авг"))
        self.pushButton_09_3.setText(_translate("MainWindow", "сент"))
        self.pushButton_10_3.setText(_translate("MainWindow", "окт"))
        self.pushButton_11_3.setText(_translate("MainWindow", "ноя"))
        self.pushButton_12_3.setText(_translate("MainWindow", "дек"))
        self.label_4.setToolTip(
            _translate("MainWindow", "<html><head/><body><p align=\"center\">ПОВЕРКА СЕГОДНЯ</p></body></html>"))
        self.label_4.setWhatsThis(
            _translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.label_4.setText(_translate("MainWindow",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:8pt;\">ПОВЕРКА 3 ДНЯ</span></p></body></html>"))

    def show_list(self):  # метод для конекта кнопки
        self.pushButton_01.clicked.connect(lambda: self.show_list_today_01())
        self.pushButton_02.clicked.connect(lambda: self.show_list_today_02())
        self.pushButton_03.clicked.connect(lambda: self.show_list_today_03())
        self.pushButton_04.clicked.connect(lambda: self.show_list_today_04())
        self.pushButton_05.clicked.connect(lambda: self.show_list_today_05())
        self.pushButton_06.clicked.connect(lambda: self.show_list_today_06())
        self.pushButton_07.clicked.connect(lambda: self.show_list_today_07())
        self.pushButton_08.clicked.connect(lambda: self.show_list_today_08())
        self.pushButton_09.clicked.connect(lambda: self.show_list_today_09())
        self.pushButton_10.clicked.connect(lambda: self.show_list_today_10())
        self.pushButton_11.clicked.connect(lambda: self.show_list_today_11())
        self.pushButton_12.clicked.connect(lambda: self.show_list_today_12())

        self.pushButton_01_3.clicked.connect(lambda: self.show_list_3days_01_3())
        self.pushButton_02_3.clicked.connect(lambda: self.show_list_3days_02_3())
        self.pushButton_03_3.clicked.connect(lambda: self.show_list_3days_03_3())
        self.pushButton_04_3.clicked.connect(lambda: self.show_list_3days_04_3())
        self.pushButton_05_3.clicked.connect(lambda: self.show_list_3days_05_3())
        self.pushButton_06_3.clicked.connect(lambda: self.show_list_3days_06_3())
        self.pushButton_07_3.clicked.connect(lambda: self.show_list_3days_07_3())
        self.pushButton_08_3.clicked.connect(lambda: self.show_list_3days_08_3())
        self.pushButton_09_3.clicked.connect(lambda: self.show_list_3days_09_3())
        self.pushButton_10_3.clicked.connect(lambda: self.show_list_3days_10_3())
        self.pushButton_11_3.clicked.connect(lambda: self.show_list_3days_11_3())
        self.pushButton_12_3.clicked.connect(lambda: self.show_list_3days_12_3())

        self.pushButton_NSS_END.clicked.connect(lambda: self.show_list_NSS_end())
        self.pushButton_NSS_365.clicked.connect(lambda: self.show_list_NSS_365())

        # !!!ФУНКЦИИ РАБОТЫ КНОПОК!!!
    def show_list_NSS_365(self):
        print(datetime.today())
        # self.label_2.setText('ДАННЫЕ') - ВЫВОД В ОКНО РАБОТАЕТ!!!

        # Цикл для контроля НСС оснастки 365 дней
        for row in range(3, sheet.max_row + 1):
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value
            date_end = sheet[row][18].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date365 = date1 + timedelta(days=365)

            # обработчик исключений для пропуска пустых ячеек или ячеек со строкой
            try:
                if date365 >= date_end >= date1:
                    # self.label_2.setText('str(numbers)')
                    print(numbers, name, obozn)

            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_01(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date2 = sheet[row][5].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)
            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date2 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_02(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date3 = sheet[row][6].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)
            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date3 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_03(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date4 = sheet[row][7].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)
            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date4 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_04(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date5 = sheet[row][8].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date5 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_05(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date6 = sheet[row][9].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date6 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_06(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date7 = sheet[row][10].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date7 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_07(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date8 = sheet[row][11].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date8 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_08(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date9 = sheet[row][12].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date9 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_09(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date10 = sheet[row][13].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date10 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_10(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date11 = sheet[row][14].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date11 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_11(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date12 = sheet[row][15].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date12 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_today_12(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date13 = sheet[row][16].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(hours=23)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date13 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())

    def show_list_3days_01_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date2 = sheet[row][5].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)
            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date2 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_02_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date3 = sheet[row][6].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)
            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date3 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_03_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date4 = sheet[row][7].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)
            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date4 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_04_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date5 = sheet[row][8].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date5 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_05_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date6 = sheet[row][9].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date6 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_06_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date7 = sheet[row][10].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date7 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_07_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date8 = sheet[row][11].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date8 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_08_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date9 = sheet[row][12].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date9 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_09_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date10 = sheet[row][13].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date10 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_10_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date11 = sheet[row][14].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date11 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_11_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date12 = sheet[row][15].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date12 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())
    def show_list_3days_12_3(self):
        print(datetime.today())
        # Цикл для вывода информации о дате поверки сегодня
        for row in range(4,
                         sheet.max_row + 1):  # атрибут max_row+1 включает все строки файла и +1 захватывает последнюю
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value

            date13 = sheet[row][16].value

            # Модуль timedelta для создания переменных для контролируемого промежутка времени
            date1 = datetime.today()
            date1_plus_time = date1 + timedelta(days=3)
            date1_minus_time = date1 - timedelta(hours=23)

            try:  # Выбрка неповеренной оснастки на ближайшие 3 дня
                if date1_minus_time < date13 < date1_plus_time:
                    print(numbers, name, obozn)
            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())

    def show_list_NSS_end(self):
        print(datetime.today())
        # Цикл для контроля НСС оснастки
        for row in range(3, sheet.max_row + 1):
            numbers = sheet[row][0].value
            name = sheet[row][1].value
            obozn = sheet[row][2].value
            dateend = sheet[row][18].value
            date2 = datetime.today()

            # обработчик исключений для пропуска пустых ячеек или ячеек со строкой
            try:
                if date2 > dateend:
                    print(numbers, name, obozn)

            except TypeError:
                continue
        print("Проверка завершена.", datetime.today())


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())





